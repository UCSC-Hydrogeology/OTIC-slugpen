function [yr,mo,dy,hr,mn,sc,accx,accy,accz,pwr,z,Traw,Other,Parameters] = p51_LoadUnix(H,f)
%p51_LoadUnix Loads an ROQ HFP Raw file using AWK
%

% % Parse Filename
[~,fn,~]=fileparts(f);

% % Open Messagebox
h_wait = msgbox('Scanning Data...','Load');
% % ---------------------  START SCANNING DATA -  UNIX --------------------- % % 

%disp(' Unix - using awk...')
% Grab all lines with length > 80 (Data)
%eval(['!awk ''length > 80'' ',f,' > RawData.tmp'])
% Grab all Acomms Report lines
%eval(['!awk ''/RPT/'' ',f,' > ',fn,'_HReport.dat'])
% Grab all Heat Pulse Report lines
%eval(['!awk ''/HSTART/'' ',f,' > ',fn,'_HPulse.dat'])

% Prep textscan for variable number of thermistors
%NoTherm = H.Fileinfo.No_Thermistors.Value;
%n       = repmat(['%n '],1,NoTherm);    % Thermistors
%s       = repmat(['%s '],1,11);         % Time, Acc, depth

% Open the Data File and Scan in the data
%fid = fopen('RawData.tmp','r');
%C   = textscan(fid,[s n]);
%fclose(fid);

% Initialize Matrix AllTdata (All Temperature Data)
%l    = length(C{1});
%Traw = NaN*zeros(NoTherm+1,l);

% Assign
%ymd    = str2num(char(strrep(C{3},'-',' ')));
%hms    = str2num(char(strrep(C{4},':',' ')));
%accx   = str2num(char(strrep(C{6},'X','')));
%accy   = str2num(char(strrep(C{7},'Y','')));
%accz   = str2num(char(strrep(C{8},'Z','')));
%pwr    = str2num(char(strrep(C{9},'V','')));
%z      = str2num(char(strrep(C{10},'D','')));
%for i=1:NoTherm
%    foo = C{11+i}';
%    Traw(i,1:length(foo))=foo;
%end

% Restructure Traw with T1 in row 1, incrementing to Twater
%Traw(NoTherm+1,:)=Traw(1,:);
%Traw=Traw(2:end,:);


[ymd,hms,accx,accy,accz,pwr,z,Traw] = p51_ScanUnix(H,f,fn);

% % QC. Error if number of temperature measurements ~= time. Prompt for CleanRawFile
if length(Traw)~=length(hms)
    errorstr=['Timing Error. Click OK to attempt to clean'];
    dlgname = ['Timing Error'];
    %uiwait(errordlg(errorstr,dlgname,'modal'));
    choice = questdlg(errorstr,dlgname,...
        'OK','Cancel','OK');
    
    switch choice
        case 'Cancel'
            fclose all;close all hidden; clear
        case 'OK'
            CleanRawFile(f)
            [ymd,hms,accx,accy,accz,pwr,z,Traw] = p51_ScanUnix(H,f,fn);
            %if length(Traw)~=length(hms)
            %    errorstr=['Timing Error Still Exists - Unable to clean'];
            %    dlgname = ['Timing Error'];
            %    uiwait(errordlg(errorstr,dlgname,'modal'));
            %    fclose all;close all hidden; clear
            %end
    end

end
    
    
% Remove final timestep from temperature data (logger could have been
% turned off with a partial line)
%Traw = Traw(:,1:length(Traw)-1);

%T0     = C{12};
%T1     = C{13};
%T2     = C{14};
%T3     = C{15};
%T4     = C{16};
%T5     = C{17};
%T6     = C{18};
%T7     = C{19};
%T8     = C{20};
%T9     = C{21};
%T10    = C{22};
%T11    = C{23};

% % Parse Timing
yr    = ymd(:,1);
mo    = ymd(:,2);
dy    = ymd(:,3);
hr    = hms(:,1);
mn    = hms(:,2);
sc    = hms(:,3);

% % Read in Heat Pulse and Report Data
Other = {};
fid = fopen([fn,'_HPulse.dat'],'r');
i=1;
while i>0
    line = fgetl(fid);
    if line == -1
        fclose(fid);
        isave=i-1;
        i=0;
        break
    else
        Other{i}=strtrim(line);
        i=i+1;
    end
end
fid = fopen([fn,'_HReport.dat'],'r');
i=isave+1;
while i>0
    line = fgetl(fid);
    if line==-1
        fclose(fid);
        i=0;
        break
    else
        Other{i}=strtrim(line);
        i=i+1;
    end
end


% % Read in Header and Assign Parameters
fid=fopen(f,'r');

% Discard Description and first parameter line (no longer used)
line = fgetl(fid); line = fgetl(fid);

% Remaining Header Lines
headerlines = 11;

for i=1:headerlines
    line = strtrim(fgetl(fid));
    a    = find(isspace(line)==1);
    Params{i}     = strtrim(line(1:a(end)));
    ParamsVals(i) = str2num(line(a(end):end));
end
fclose(fid);

% Store Header in Structure PARAMETERS
Params     = Params;
ParamsVals = ParamsVals;
Parameters = struct('Field',{Params},'Value',ParamsVals);

% % Remove Temporary Files Generated by AWK
if exist('RawData.tmp','file')
    delete('RawData.tmp');
end
%if exist('HPulse.tmp','file')
%    delete('HPulse.tmp');
%end
%if exist('HReport.tmp','file')
%    delete('HReport.tmp');
%end

close(h_wait);

end

